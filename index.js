// Require the necessary discord.js classes
const { Client, GatewayIntentBits, ActionRowBuilder, ButtonBuilder, ButtonStyle, Events,ComponentType ,EmbedBuilder  } = require("discord.js")
const { token } = require("./config.json");
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
})
const prefix = ".";
const wait = require('node:timers/promises').setTimeout;
client.on("ready", () => {
  console.log("The bot is ready")
});
/*client.on('interactionCreate', interaction => {
  
    if (!interaction.isButton()) return;

    //if (interaction.customId == "id1") {
        interaction.reply({ content: `–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è!`, ephemeral: true }); 
        // Do what you want with button 'id1'.
    //}

});*/
client.on("messageCreate", (message) => {
  if (message.author.bot) return;
  if (!message.content.startsWith(prefix)) return;
  const commandBody = message.content.slice(prefix.length);
  const args = commandBody.split(" ");
  const command = args.shift().toLowerCase();
  if (command === "—Å–ø–∞—Ç—å") {
    //const timeTaken = Date.now() - message.createdTimestamp;
    message.reply(`https://i.gifer.com/7asX.gif`);
  }
  if (command === "–Ω–∞—Ä—É—Ç–æ") {
    //const timeTaken = Date.now() - message.createdTimestamp;
    message.reply(`https://i.gifer.com/4Kj3.gif`);
  }
  if (command === "—à—Ä–µ–∫") {
    //const timeTaken = Date.now() - message.createdTimestamp;
    message.reply(`https://i.gifer.com/AnA.gif`);
  }
   if (command === "–º–∞—à—É") {
    //const timeTaken = Date.now() - message.createdTimestamp;
    message.reply(`–ê–Ω–∞–Ω–∞—Å –≤–∞–º –º–∞—à–µ—Ç https://i.gifer.com/origin/5c/5c7eef7788caadfe10ad05245910ff49_w200.gif`);
  }
   if (command === "–º–∞—Ö–∞—é") {
    //const timeTaken = Date.now() - message.createdTimestamp;
    message.reply(`–ê–Ω–∞–Ω–∞—Å –ø–æ–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –≤ –∫–æ—Å–º–æ—Å https://i.gifer.com/7HRI.gif`);
  }
   if (command === "–º–∞—Ö—É") {
    //const timeTaken = Date.now() - message.createdTimestamp;
    message.reply(`–ê–Ω–∞–Ω–∞—Å –ø—ã—Ç–∞–µ—Ç—Å—è —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å https://usagif.com/wp-content/uploads/2022/fzk5d/1-funny-jumping-pineapple.gif`);
  }
  if (command === "–±–∏—Ç–≤–∞") {
    
    let user = message.mentions.users.first();
    if(!user) return message.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å –∫–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã –¥—Ä–∞—Ç—å—Å—è!");

    //checks if the users is trying to fight themselves
    if(user.id == message.author.id) return message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥—Ä–∞—Ç—å—Å—è —Å —Å–æ–±–æ–π!");

    //checks if the user is trying to fight the bot
    if(user.bot ==  true)
        return message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±–æ—Ä–æ—Ç—å—Å—è —Å –±–æ—Ç–æ–º!");

    //saves the two user ids to variables
    var fighter1 = message.author.id;
    var fighter2 = user.id;
    //let author1 = message.author.username;
    let author1 = message.author.toString();

    //announces challenge and awaits response
    var challenged = user.toString();


    const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId("yes")
                    .setLabel('–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                .setCustomId("no")
                .setLabel('–£–±–µ–∂–∞—Ç—å')
                .setStyle(ButtonStyle.Primary),
            );
    message.channel.send({ content: `${challenged}, ${author1} –≤—ã–∑–≤–∞–ª –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å. –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –≤—ã–∑–æ–≤?`,ephemeral: true, components: [row]})
        .then((mes) => {
            //const ifilter = i => i.user.id === fighter2; //|| i.user.id === fighter1 ;
            //const ifilter = mes.user.id === fighter2; //|| i.user.id === fighter1 ;
            const collector = mes.createMessageComponentCollector();/*{ componentType: ComponentType.Button/* ,filter: ifilter/*, time: 30000 })*/ //30000
            collector.on("collect", async button => {
            //console.log(mes.user === fighter2);
            if(button.user.id === fighter2){
                button.deferUpdate();
                console.log(button.customId);
                if (button.customId === 'yes') {
                        let duels = [challenged, author1];
                        var winner = duels[(Math.random() * duels.length) | 0];
                        await message.channel.send(`–ü–æ–±–µ–∂–¥–∞–µ—Ç ${winner}!`);
                        //await button.editReply({ content: `${challenged} –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤!`, components: [] });
                        await mes.delete();
                        return;
                }
                else{
                    await message.channel.send(`${challenged} –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–∏—Ç—å—Å—è —Å ${author1} üëé!`);
                    await mes.delete();
                    //await button.editReply({ content: `${challenged} –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–∏—Ç—å—Å—è —Å ${author1} üëé!`, components: []});
                    return;
                }
            }
            else{
                await button.reply({ content: `–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è!`, ephemeral: true })
                return;
            }
            });
        });


  }

});

// Log in to Discord with your client"s token
client.login(token);